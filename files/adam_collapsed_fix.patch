diff --git a/proxy/http/HttpTransact.cc b/proxy/http/HttpTransact.cc
index cacaf3e..f0fc16c 100644
--- a/proxy/http/HttpTransact.cc
+++ b/proxy/http/HttpTransact.cc
@@ -2925,10 +2925,22 @@ HttpTransact::build_response_from_cache(State *s, HTTPWarningCode warning_code)
       DebugTxn("http_trans", "[build_response_from_cache] Match! Serving full document.");
       s->cache_info.action = CACHE_DO_SERVE;
 
+      bool partial_content_reason = false;
+      if (HTTP_STATUS_OK == client_response_code) {
+        // a cached result will have a TS_HTTP_OK with a 'Partial Content' reason
+        int length = 0;
+        const char *p = NULL;
+        if ((p = cached_response->reason_get(&length)) != nullptr) {
+          if ((length == 15) && (0 == strncasecmp(p, "Partial Content", length))) {
+            partial_content_reason = true;
+          }
+        }
+      }
+
       // Check if cached response supports Range. If it does, append
       // Range transformation plugin
       // only if the cached response is a 200 OK
-      if (client_response_code == HTTP_STATUS_OK && client_request->presence(MIME_PRESENCE_RANGE)) {
+      if (client_response_code == HTTP_STATUS_OK && client_request->presence(MIME_PRESENCE_RANGE) && !partial_content_reason) {
         s->state_machine->do_range_setup_if_necessary();
         if (s->range_setup == RANGE_NOT_SATISFIABLE) {
           build_error_response(s, HTTP_STATUS_RANGE_NOT_SATISFIABLE, "Requested Range Not Satisfiable", "default", nullptr);
